# -*- coding: utf-8 -*-
"""Week 8 Practice Notebook: Writing Data and Retrieving Data From Redis - Breakout 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wAYA_oXozN90L8vh0Ths7-JCXmGEfdw6

# Practice Notebook: Writing Data and Retrieving Data From Redis
"""

!pip install redis

"""## Challenge 1

Write a function that takes in a string and stores it in Redis under the key "message". Then, retrieve the message from Redis and return it.

Hints:

* Use the set method to store the string in Redis.
* Use the get method to retrieve the string from Redis.
* Remember that Redis returns bytes objects when you retrieve data.
"""

# Your code goes here

# import redis
import redis

#connect to reddis
r = redis.Redis(
  host='redis-15919.c91.us-east-1-3.ec2.cloud.redislabs.com',
  port=15919,
  password='nVmHZlngfY9h61SwlkrcIsk8VF4ukWe4')
  

def store_and_retrieve_message(message):
# Store the message in Redis
  r.set("message", message)
  # Retrieve the message from Redis
  message_bytes = r.get("message")
  # Convert the bytes object to a string
  message_string = message_bytes.decode('utf-8')
  # Return the message
  return message_string

store_and_retrieve_message('Girl')

"""### Sample Solution"""

import redis

r = redis.Redis(host="", port="", db="")

def store_and_retrieve_message(message):
# Store the message in Redis
r.set("message", message)

# Retrieve the message from Redis
message_bytes = r.get("message")

# Convert the bytes object to a string
message_string = message_bytes.decode('utf-8')

# Return the message
return message_string

"""## Challenge 2

Write a function that takes in a dictionary representing a person's information (name, age, and city) and stores it in Redis as a hash under the key "person". Then, retrieve the person's information from Redis and return it as a dictionary.

Hints:

* Use the hset method to store the values in the Redis hash.
* Use the hgetall method to retrieve the hash from Redis.
* Remember that Redis returns bytes objects when you retrieve data.
"""

# Your code goes here

# import redis
import redis


def store_and_retrieve_person_info(person):
# Store the person's information in Redis as a hash
  r.hset("person", "name", person["name"])
  r.hset("person","age", person['age'])
  r.hset("person", "occupation", person['occupation'])
# Retrieve the person's information from Redis
  person_hash = r.hgetall("person")
# Convert the bytes objects to strings
  person_dict = {}
  for key, value in person_hash.items():
    key_string = key.decode('utf-8')
    value_string = value.decode('utf-8')
    person_dict[key_string] = value_string

# Return the person's information as a dictionary
  return person_dict
  
korir= {"name": 'Korir', 'age':39, 'occupation':'Engineer'}
kemboi= {"name": 'Allan', 'age':19, 'occupation':'Farmer'}
store_and_retrieve_person_info(kemboi)

"""### Sample solution"""

import redis

r = redis.Redis(host="", port="", db="")

def store_and_retrieve_person_info(person):
# Store the person's information in Redis as a hash
  r.hset("person", "name", person["name"])
  r.hset("person", "age", person["age"])
  r.hset("person", "city", person["city"])

# Retrieve the person's information from Redis
person_hash = r.hgetall("person")

# Convert the bytes objects to strings
person_dict = {}
for key, value in person_hash.items():
    key_string = key.decode('utf-8')
    value_string = value.decode('utf-8')
    person_dict[key_string] = value_string

# Return the person's information as a dictionary
return person_dict